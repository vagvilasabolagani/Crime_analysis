# -*- coding: utf-8 -*-
"""Project_FALL2022.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h2PvOebhgI2Wte3du-ulS_sgW2RCLdVI

#**Crime Analysis in the City of LA**

# Dataset Description:

## Crime Data from 2020 to Present:

This dataset reflects incidents of crime in the City of Los Angeles dating back to 2020. This data is transcribed from original crime reports that are typed on paper and therefore there may be some inaccuracies within the data. Address fields are only provided to the nearest hundred block in order to maintain privacy. This data is as accurate as the data in the database.

Includes 28 attributes and ~600k records.

The link to dataset is: https://catalog.data.gov/dataset/crime-data-from-2020-to-present

We will explore the following questions related to the data:

* What are the areas with highest and lowest crime incidents in LA?
* Identify the number of crimes occurred each year and each month of every year in the data provided.
* What is the percentage of crimes occurred in each?
   * a) time of the day
   * b) type of gender and
   * c) age group
* How is the status of the crime distributed in the data?
* What are the 5 most common crime types when the crime is reported 7 days later?
* How is the crime status distributed across all genders?
* What is the importance of data cleansing, data entry and how can they effect analyzing the data?

### Reading Source Data
"""

# importing libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# The below section is for importing/reading the file into google colab from my local machine.
from google.colab import files
uploaded = files.upload()

# Importing IO library
import io

# reading the source file
dataset = pd.read_csv(io.BytesIO(uploaded['Crime_Data_from_2020_to_Present.csv']))

"""### Dataset Information"""

print("The attributes of the dataset are:\n", dataset.columns)
print("The shape of the dataset is:",dataset.shape)
print(dataset.info())
print(dataset.describe())

"""### Data Cleansing"""

# Filtering only significant columns for data analysis
dataset = dataset.filter(['Date Rptd', 'DATE OCC', 'TIME OCC', 'AREA', 'AREA NAME', 'Crm Cd', 'Crm Cd Desc','Vict Age', 'Vict Sex', 'Premis Cd', 'Premis Desc',
       'Weapon Used Cd', 'Weapon Desc', 'Status', 'Status Desc', 'LAT', 'LON'], axis=1)

# Filtering out data where 'Vict Age' is less than zero
dataset = dataset.loc[~(dataset['Vict Age'] <=0)]

"""
### Data preparation and identifying Crimes by year"""

import calendar
# Type converting date reported and date occurred columns
dataset['Date Rptd'] = pd.to_datetime(dataset['Date Rptd'])
dataset['DATE OCC'] = pd.to_datetime(dataset['DATE OCC'])

# Timing difference between data occurred and date reported
dataset['Time_to_report_Crime'] = (dataset['Date Rptd'] - dataset['DATE OCC'])/(1000000000*60*60*24) # converting the nano seconds to days

# Creating columns to identify the year and month from the date occurred column
dataset['Crime_Year'] = pd.DatetimeIndex(dataset['DATE OCC']).year
dataset['Crime_Month'] = pd.DatetimeIndex(dataset['DATE OCC']).month

# Keeping the month to be in short forms
dataset['Crime_Month'] = dataset['Crime_Month'].apply(lambda x: calendar.month_abbr[x])
crime_lineplot = dataset.groupby(['Crime_Year', 'Crime_Month'], as_index=False).size()
crime_year_lineplot = dataset.groupby(['Crime_Year'], as_index=False).size()
print(crime_year_lineplot)

"""### Bar Plot showing 5 areas with highest and least crime rate in Los Angeles"""

# Area wise crimes in Los Angeles
df_area_crime = dataset.groupby(['AREA NAME'], as_index=False).size()
df_area_crime.sort_values(['size'], ascending=False, inplace=True)

# Selecting the highest and least crime areas in Los Angeles
df_barplot = df_area_crime.iloc[:5]
Area = df_barplot['AREA NAME'].squeeze()
Crimes = df_barplot['size'].squeeze()

# Creating descriptions and showing the bar plot
plt.ylabel("Number of crimes")
plt.xlabel("Areas in Los Angeles")
plt.title('Areas with highest crime rate in Los Angeles')
plt.bar(Area, Crimes, color='red', width=0.3)
plt.ylim(0,40000)
plt.show()

df_barplot2 = df_area_crime.iloc[-5:]
Area2 = df_barplot2['AREA NAME'].squeeze()
Crimes2 = df_barplot2['size'].squeeze()

# Creating descriptions and showing the bar plot
plt.ylabel("Number of crimes")
plt.xlabel("Areas in Los Angeles")
plt.title('Areas with least crime rate in Los Angeles')
plt.bar(Area2, Crimes2, color='green', width=0.3)
plt.ylim(0,40000)
plt.show()

"""### Line Plot showing the crimes in Los Angeles by year"""

year_plot = crime_year_lineplot['Crime_Year'].tolist()
crimes = crime_year_lineplot['size'].tolist()
year_plot = list(map(str, year_plot))
plt.plot(year_plot,crimes, color='purple', linewidth=2, linestyle='dotted', marker='x', markersize=12)
plt.xlabel('Year')
plt.ylabel('Number of Crimes')
plt.ylim(0,200000)
plt.title('Crimes in Los Angeles from 2020 to Present by year')
plt.show()

"""### Line Plots showing Crimes in each month of a year"""

# from calendar import month_abbr
# month_lookup = list(month_abbr)
month_plot = crime_lineplot['Crime_Month'].drop_duplicates().tolist()
color=["blue", "orange", "purple"]
c=0
# sorted(month_plot, key=month_lookup.index)
for i in range(2020,2023):
  crime_month = crime_lineplot[crime_lineplot['Crime_Year'] == i]
  crime_month = crime_month['size'].tolist()
  plt.plot(month_plot, crime_month, label=i, marker="x", color=color[c])
  c+=1
  plt.xlabel("Month")
  plt.ylabel("Crimes")
  plt.title("Crimes by month")
  plt.ylim(0,30000)
  plt.legend(loc='best', shadow=False, fontsize='small')
  plt.grid()
  plt.show()

"""### Pie charts

#### Standardizing the 'Time Occured', 'Victim's age' attributes for visualizations
"""

# Creating a custom column 'Day' for categorizing the day into 4 parts for visualizations
dataset['Day'] = np.where((dataset['TIME OCC'] >= 500) & (dataset['TIME OCC'] <= 1000), "Morning",
                          np.where((dataset['TIME OCC'] > 1000) & (dataset['TIME OCC'] <= 1300), "Late Morning",
                                   np.where((dataset['TIME OCC'] > 1300) & (dataset['TIME OCC'] <= 1900), "Afternoon",
                                            np.where((dataset['TIME OCC'] > 1900) | (dataset['TIME OCC'] < 500), "Night", "Undefined"))))

# Creating a custom column 'Age Category' for categorizing the age groups into 4 parts for visualizations
dataset['Age Category'] = np.where((dataset['Vict Age'] >= 0) & (dataset['Vict Age'] <= 14), "Children",
                          np.where((dataset['Vict Age'] > 14) & (dataset['Vict Age'] <= 24), "Youth",
                                   np.where((dataset['Vict Age'] > 24) & (dataset['Vict Age'] <= 64), "Adults",
                                            np.where((dataset['Vict Age'] > 64), "Seniors", "Undefined"))))

"""#### Pie Charts for Crime rates by Time of the Day, Age, and Gender"""

pie_list = ['Day', 'Age Category', 'Vict Sex']
for i in range(len(pie_list)):
  crime_pie = dataset.groupby(pie_list[i], as_index=False).size()
  crimes_by_day = crime_pie['size'].tolist()
  crime_labels_day = crime_pie[pie_list[i]].tolist()
  plt.pie(crimes_by_day,labels=crime_labels_day,
          shadow=True,
          radius=30,   # size of pie
          autopct='%.2f%%', # display percent value in each pie wedge
          pctdistance=0.8,
          explode=[3,1,1,3],
          counterclock=True,
          startangle=90   # starting angle, default 0 degree
         )
  plt.axis("equal")
  plt.show()

"""### Waffle Chart

#####A waffle chart shows progress towards a target or a completion percentage. There is a grid of small cells, of which coloured cells represent the data.A chart can consist of one category or several categories. Multiple waffle charts can be put together to show a comparison between different charts.
"""

# Getting the count of different crime statuses
crime_status = dataset.groupby(['Status Desc'], as_index=False).size()
crime_status['percentage'] = crime_status['size']/crime_status['size'].sum()*100
print(crime_status)

# !pip install pywaffle
from pywaffle import Waffle

status = dict(dataset['Status Desc'].value_counts())
percent = dict(dataset['Status Desc'].value_counts(normalize=True))
labels = [f'{k} status: {v*100:.1f}%' for k,v in percent.items()]
labels

fig = plt.figure(FigureClass=Waffle,
                 figsize=(10,15),
                 rows=20, columns=30,
                 values=status, legend={'loc': (1.05,0.5), 'labels': labels},
                 title={'label': 'The Current Status of the Crime'},
                 cmap_name='Dark2')

"""### Donut Chart"""

dataset['Time_to_report_Crime'] = dataset['Time_to_report_Crime'].astype(int)
df_time = dataset.loc[dataset['Time_to_report_Crime'] > 7]
print('Crimes that were reported after seven days of occurrence:',df_time.shape)

df_group = df_time.groupby(['Crm Cd Desc', 'Status Desc'], as_index=False).size()
df_group.sort_values(['size'], ascending=False, inplace=True)
df_group = df_group.head(5)

# colors
colors = ['#FF0000', '#0000FF', '#FFFF00','#ADFF2F', '#FFA500']
# explosion
# explode = (0.05, 0.05, 0.05, 0.05, 0.05)

# Pie Chart
plt.pie(df_group['size'].tolist(), colors=colors,
        labels=df_group['Crm Cd Desc'].tolist(),
				autopct='%1.1f%%', pctdistance=0.85)
				# explode=explode)
# draw circle
centre_circle = plt.Circle((0, 0), 0.70, fc='white')
fig = plt.gcf()
# Adding Circle in Pie chart
fig.gca().add_artist(centre_circle)
# Adding Title of chart
plt.title('Top Crime types that were reported after 7 days of Crime')
# Displaying Chart
plt.show()

"""### Radar Chart"""

categories = crime_status['Status Desc'].tolist()
print(categories)
df = dataset.groupby(['Vict Sex', 'Status Desc'], as_index=False).size()
print(df)
male_victims = df[df['Vict Sex'] == 'M']
male_victims_list = male_victims['size'].tolist()
# print(male_victims_list)

female_victims = df[df['Vict Sex'] == 'F']
female_victims_list = female_victims['size'].tolist()
# print(female_victims_list)

h_victims = df[df['Vict Sex'] == 'H']
h_victims_list = h_victims['size'].tolist()
while len(h_victims_list) <5:
  h_victims_list.append(0)
# print(h_victims_list)

x_victims = df[df['Vict Sex'] == 'X']
x_victims_list = x_victims['size'].tolist()
# print(x_victims_list)

categories = [*categories, categories[0]]
m = [*male_victims_list, male_victims_list[0]]
f = [*female_victims_list, female_victims_list[0]]
h = [*h_victims_list, h_victims_list[0]]
x = [*x_victims_list, x_victims_list[0]]

label_loc = np.linspace(start=0, stop=2*np.pi, num=len(m))

plt.figure(figsize=(15, 15))
plt.subplot(polar=True)
plt.plot(label_loc, m, label='M')
plt.plot(label_loc, f, label='F')
plt.plot(label_loc, h, label='H')
plt.plot(label_loc, x, label='X')

plt.title('Analysing crime status across genders', size=20)
plt.thetagrids(np.degrees(label_loc), labels=categories)
plt.legend()
plt.show()

"""### GeoPandas Usage and Importance of Data"""

# !pip install geopandas
from shapely.geometry import Point
import geopandas as gpd
from geopandas import GeoDataFrame

geometry = [Point(xy) for xy in zip(dataset['LON'], dataset['LAT'])]
gdf = GeoDataFrame(dataset, geometry=geometry)

#this is a simple map that goes with geopandas
world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))
NAmerica = world[world['continent'] == 'North America']
gdf.plot(ax=NAmerica.plot(figsize=(10, 6)), marker='o', color='black', markersize=15)

gdf.plot(ax=world.plot(figsize=(10, 6)), marker='o', color='red', markersize=15)